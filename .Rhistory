qqnorm(Lab2data$Temp2, main = "QQ Plot for Temperature")
qqline(Lab2data$Temp2, col = 2)
# Save screenshot for temperature QQ plot
dev.copy(png, file = "temperature_qqplot.png")
dev.off()
# QQ plot for pollen count
qqnorm(Lab2data$pollen, main = "QQ Plot for Pollen Count")
qqline(Lab2data$pollen, col = 2)
# Save screenshot for pollen count QQ plot
dev.copy(png, file = "pollen_count_qqplot.png")
dev.off()
# Shapiro-Wilk Normality Test for temperature
shapiro_temp <- shapiro.test(Lab2data$temperature)
# Assuming "temperature" and "pollen_count" are the column names in Lab2data
# QQ plot for temperature
qqnorm(Lab2data$Temp2, main = "QQ Plot for Temperature")
qqline(Lab2data$Temp2, col = 2)
# QQ plot for pollen count
qqnorm(Lab2data$pollen, main = "QQ Plot for Pollen Count")
qqline(Lab2data$pollen, col = 2)
# Shapiro-Wilk Normality Test for temperature
shapiro_temp <- shapiro.test(Lab2data$Temp2)
cat("Shapiro-Wilk Normality Test for Temperature:\n", "p-value =", shapiro_temp$p.value, "\n")
# Shapiro-Wilk Normality Test for pollen count
shapiro_pollen <- shapiro.test(Lab2data$pollen)
cat("Shapiro-Wilk Normality Test for Pollen Count:\n", "p-value =", shapiro_pollen$p.value, "\n")
# Assuming "temperature" and "pollen_count" are the column names in Lab2data
# QQ plot for temperature
qqnorm(Lab2data$Temp2, main = "QQ Plot for Temperature")
qqline(Lab2data$Temp2, col = 2)
# QQ plot for pollen count
qqnorm(Lab2data$pollen, main = "QQ Plot for Pollen Count")
qqline(Lab2data$pollen, col = 2)
# Shapiro-Wilk Normality Test for temperature
shapiro_temp <- shapiro.test(Lab2data$Temp2)
cat("Shapiro-Wilk Normality Test for Temperature:\n", "p-value =", shapiro_temp$p.value, "\n")
# Shapiro-Wilk Normality Test for pollen count
shapiro_pollen <- shapiro.test(Lab2data$pollen)
cat("Shapiro-Wilk Normality Test for Pollen Count:\n", "p-value =", shapiro_pollen$p.value, "\n")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type = "l", col = "blue",
xlab = "Day", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type = "l", col = "blue",
xlab = "Day", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$Date, Lab2data$pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$Date, Lab2data$pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen", main = "Pollen Count Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type = "l", col = "blue",
xlab = "Day", ylab = "Pollen", main = "Pollen Count Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$pollen, type = "l", col = "blue",
xlab = "Day", ylab = "Pollen", main = "Pollen Count Over Time")
# Plot for EVI
plot(Lab2data$EVI, type = "l", col = "green",
xlab = "Day", ylab = "EVI", main = "EVI Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen", main = "Pollen Count Over Time")
# Plot for EVI
plot(Lab2data$EVI, type = "l", col = "green",
xlab = "Date", ylab = "EVI", main = "EVI Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$day, Lab2data$pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen", main = "Pollen Count Over Time")
# Assuming "Date", "pollen_count", and "EVI" are the column names in Lab2data
# Plot for Pollen Count
plot(Lab2data$day, Lab2data$pollen, type = "l", col = "blue",
xlab = "day", ylab = "Pollen", main = "Pollen Count Over Time")
# Plot Pollen Count over Time
plot(x = Lab2data$Date, y = Lab2data$Pollen, type="l", col="blue",
xlab="Date", ylab="Pollen Count", main = "Pollen Count Over Time")
# Plot Pollen Count over Time
plot(x = Lab2data$day, y = Lab2data$Pollen, type="l", col="blue",
xlab="day", ylab="Pollen Count", main = "Pollen Count Over Time")
# Plot Pollen Count over Time
plot(x = Lab2data$day, y = Lab2data$Pollen, type="l", col="blue",
xlab="day", ylab="Pollen Count", main = "Pollen Count Over Time")
# Plot Pollen Count over Time
plot(x = Lab2data$day, y = Lab2data$Pollen, type="l", col="blue",
xlab="day", ylab="Pollen Count", main = "Pollen Count Over Time")
# Plot Pollen Count over Time
plot(x = Lab2data$day, y = Lab2data$Pollen, type="l", col="blue",
xlab="Day", ylab="Pollen Count", main = "Pollen Count Over Time")
# Plot Pollen Count over Time
plot(x = Lab2data$day, y = Lab2data$Pollen, type="l", col="blue",
xlab="Day", ylab="Pollen Count", main = "Pollen Count Over Time")
# Plot EVI over Time
plot(x = Lab2data$Date, y = Lab2data$EVI, type="l", col="green",
xlab="Date", ylab="EVI", main ="EVI Over Time")
# Plot Pollen Count over Time
plot(x = Lab2data$Day, y = Lab2data$Pollen, type="l", col="blue",
xlab="Date", ylab="Pollen Count", main = "Pollen Count Over Time")
# Plot EVI over Time
plot(x = Lab2data$Day, y = Lab2data$EVI, type="l", col="green",
xlab="Date", ylab="EVI", main ="EVI Over Time")
Lab2data <- Lab2data[complete.cases(Lab2data$Pollen), ]
Lab2data <- Lab2data[complete.cases(Lab2data$Pollen), ]
plot(x = Lab2data$Day, y = Lab2data$Pollen, type="l", col="blue",
xlab="Date", ylab="Pollen Count", main = "Pollen Count Over Time")
# Filter out NA values
df <- Lab2data[complete.cases(Lab2data$Date, Lab2data$Pollen),]
df <- Lab2data[complete.cases(Lab2data$Date, Lab2data$Pollen),]
plot(df$Date, df$Pollen, type="l",...)
# Filter out NA values
df <- Lab2data[complete.cases(Lab2data$Date, Lab2data$Pollen),]
# Filter out NA values
df <- Lab2data[complete.cases(Lab2data$Date, Lab2data$Pollen),]
df <- Lab2data[complete.cases(Lab2data$Day, Lab2data$Pollen),]
# Plot
plot(x = df$Date, y = df$Pollen, type="l",
col="blue", xlab="Date", ylab="Pollen Count",
main="Pollen Count Over Time")
# Plot
plot(x = df$Day, y = df$Pollen, type="l",
col="blue", xlab="Day", ylab="Pollen Count",
main="Pollen Count Over Time")
plot(x = df$Day, y = df$Pollen, type="l",
col="blue", xlab="Date", ylab="Pollen Count",
main="Pollen Count Over Time")
# Plot
plot(x = df$Day, y = df$Pollen, type="l",
col="blue", xlab="Date", ylab="Pollen",
main="Pollen Count Over Time")
df
# Plot
plot(x = df$Day, y = df$Pollen, type="l",
col="blue", xlab="Date", ylab="Pollen",
main="Pollen Count Over Time")
Lab2data <- read.csv(file_path)
missing_values <- is.na(Lab2data$Pollen) | !is.finite(Lab2data$Pollen)
# Plot Pollen Count over Time, excluding missing or infinite values
plot(x = Lab2data$Day[!missing_values], y = Lab2data$Pollen[!missing_values],
type = "l", col = "blue", xlab = "Date", ylab = "Pollen Count",
main = "Pollen Count Over Time")
# Plot Pollen Count over Time, excluding missing or infinite values
plot(x = Lab2data$Day[!missing_values], y = Lab2data$Pollen[!missing_values],
type = "l", col = "blue", xlab = "Date", ylab = "Pollen Count",
main = "Pollen Count Over Time")
# Plot Pollen Count over Time, excluding missing or infinite values
plot(x = Lab2data$Day[!missing_values], y = Lab2data$Pollen[!missing_values],
type = "l", col = "blue", xlab = "Date", ylab = "Pollen Count",
main = "Pollen Count Over Time")
missing_values <- is.na(Lab2data$Pollen) | !is.finite(Lab2data$Pollen)
# Plot Pollen Count over Time, excluding missing or infinite values
plot(x = Lab2data$Day[!missing_values], y = Lab2data$Pollen[!missing_values],
type = "l", col = "blue", xlab = "Date", ylab = "Pollen Count",
main = "Pollen Count Over Time")
missing_values <- is.na(Lab2data$Pollen) | !is.finite(Lab2data$Pollen)
# Plot Pollen Count over Time, excluding missing or infinite values
plot(x = Lab2data$Day[!missing_values], y = Lab2data$Pollen[!missing_values],
type = "l", col = "blue", xlab = "Date", ylab = "Pollen Count",
main = "Pollen Count Over Time")
missing_values_pollen <- is.na(Lab2data$Pollen) | !is.finite(Lab2data$Pollen)
missing_values_evi <- is.na(Lab2data$EVI) | !is.finite(Lab2data$EVI)
plot(x = Lab2data$day[!missing_values_pollen], y = Lab2data$Pollen[!missing_values_pollen],
type = "l", col = "blue", xlab = "Day", ylab = "Pollen Count",
main = "Pollen Count Over Time")
plot(x = Lab2data$day[!missing_values_pollen], y = Lab2data$Pollen[!missing_values_pollen],
type = "l", col = "blue", xlab = "Day", ylab = "Pollen Count",
main = "Pollen Count Over Time")
plot(x = Lab2data$day[!missing_values_pollen], y = Lab2data$Pollen[!missing_values_pollen],
type = "l", col = "blue", xlab = "Day", ylab = "Pollen Count",
main = "Pollen Count Over Time")
plot(x = Lab2data$day[!missing_values_pollen], y = Lab2data$Pollen[!missing_values_pollen],
type = "l", col = "blue", xlab = "Day", ylab = "Pollen Count",
main = "Pollen Count Over Time")
plot(x = Lab2data$day[!missing_values_pollen], y = Lab2data$Pollen[!missing_values_pollen],
type = "l", col = "blue", xlab = "Day", ylab = "Pollen Count",
main = "Pollen Count Over Time")
plot(x = Lab2data$day[!missing_values_pollen], y = Lab2data$Pollen[!missing_values_pollen],
type = "l", col = "blue", xlab = "Day", ylab = "Pollen Count",
main = "Pollen Count Over Time")
plot(x = Lab2data$day[!missing_values_evi], y = Lab2data$EVI[!missing_values_evi],
type = "l", col = "green", xlab = "Day", ylab = "EVI",
main = "EVI Over Time")
plot(x = Lab2data$day[!missing_values_evi], y = Lab2data$EVI[!missing_values_evi],
type = "l", col = "green", xlab = "Day", ylab = "EVI",
main = "EVI Over Time")
complete_cases <- complete.cases(Lab2data$day, Lab2data$EVI)
plot(x = Lab2data$day[complete_cases], y = Lab2data$EVI[complete_cases],
type = "l", col = "green", xlab = "Day", ylab = "EVI",
main = "EVI Over Time")
Lab2data <- read.csv(file_path)
complete_cases <- complete.cases(Lab2data$day, Lab2data$EVI)
plot(x = Lab2data$day[complete_cases], y = Lab2data$EVI[complete_cases],
type = "l", col = "green", xlab = "Day", ylab = "EVI",
main = "EVI Over Time")
# Assuming "Month" and "Pollen" are the correct column names in Lab2data
# Subset the data for April and May
pollen_april <- Lab2data$Pollen[Lab2data$Month == "April"]
pollen_may <- Lab2data$Pollen[Lab2data$Month == "May"]
# Perform a two-sample t-test
t_test_result <- t.test(pollen_april, pollen_may)
pollen_april <- Lab2data$Pollen[Lab2data$Month == "April"]
pollen_may <- Lab2data$Pollen[Lab2data$Month == "May"]
t_test_result <- t.test(pollen_april, pollen_may)
# Perform a two-sample t-test
t_test_result <- t.test(pollen_count_april, pollen_count_may)
# Perform a two-sample t-test
t_test_result <- t.test(pollen_count_april, pollen_count_may)
print(t_test_result)
# Fit a linear regression model
regression_model <- lm(Pollen ~ EVI, data = Lab2data)
regression_model <- lm(Pollen ~ EVI, data = Lab2data)
Lab2data <- read.csv(file_path)
regression_model <- lm(Pollen ~ EVI, data = Lab2data)
regression_model <- lm(pollen ~ EVI, data = Lab2data)
formula <- as.formula(regression_model)
coefficients <- coef(regression_model)
cat("Regression Formula:", format(formula), "\n")
cat("Coefficients:\n")
print(coefficients)
summary(regression_model)
plot(Lab2data$EVI, Lab2data$Pollen, xlab = "EVI", ylab = "Pollen Count", main = "Pollen Count Vs EVI")
abline(regression_model, col = "red")
residuals <- residuals(regression_model)
plot(Lab2data$EVI, residuals, xlab = "EVI", ylab = "Residuals", main = "Residuals Vs EVI")
# Assuming "Pollen" and "EVI" are the correct column names in Lab2data
# Fit a linear regression model
regression_model <- lm(pollen ~ EVI, data = Lab2data)
# Get the formula and coefficients
formula <- as.formula(regression_model)
coefficients <- coef(regression_model)
# Print the formula and coefficients
cat("Regression Formula:", format(formula), "\n")
cat("Coefficients:\n")
print(coefficients)
# Check the significance of the predictor (EVI)
summary(regression_model)
# Plot the data and add the fitted regression line
plot(Lab2data$EVI, Lab2data$Pollen, xlab = "EVI", ylab = "Pollen Count", main = "Pollen Count Vs EVI")
abline(regression_model, col = "red")
# Plot residuals in a separate graph
residuals <- residuals(regression_model)
plot(Lab2data$EVI, residuals, xlab = "EVI", ylab = "Residuals", main = "Residuals Vs EVI"
# Assuming "Pollen" and "EVI" are the correct column names in Lab2data
# Fit a linear regression model
regression_model <- lm(pollen ~ EVI, data = Lab2data)
# Get the formula and coefficients
formula <- as.formula(regression_model)
coefficients <- coef(regression_model)
# Print the formula and coefficients
cat("Regression Formula:", format(formula), "\n")
cat("Coefficients:\n")
print(coefficients)
# Check the significance of the predictor (EVI)
summary(regression_model)
# Plot the data and add the fitted regression line
plot(Lab2data$EVI, Lab2data$Pollen, xlab = "EVI", ylab = "Pollen Count", main = "Pollen Count Vs EVI")
abline(regression_model, col = "red")
# Plot residuals in a separate graph
residuals <- residuals(regression_model)
plot(Lab2data$EVI, residuals, xlab = "EVI", ylab = "Residuals", main = "Residuals Vs EVI")
# Assuming "Pollen," "EVI," "Precipitation," and "Temperature" are the correct column names in Lab2data
# Fit a multiple linear regression model
regression_model <- lm(pollen ~ EVI + preci + Temp2, data = Lab2data)
# Get the formula and coefficients
formula <- as.formula(regression_model)
coefficients <- coef(regression_model)
# Print the formula and coefficients
cat("Regression Formula:", format(formula), "\n")
cat("Coefficients:\n")
print(coefficients)
# Check the significance of the predictors
summary(regression_model)
# Plot residuals
residuals <- residuals(regression_model)
plot(residuals, xlab = "Observation", ylab = "Residuals", main = "Residuals Plot")
abline(h = 0, col = "red", lty = 2)  # Add a horizontal line at y = 0
# Assuming "Pollen," "EVI," "Precipitation," and "Temperature" are the correct column names in Lab2data
# Fit a multiple linear regression model
regression_model <- lm(pollen ~ EVI + preci + Temp2, data = Lab2data)
# Get the formula and coefficients
formula <- as.formula(regression_model)
coefficients <- coef(regression_model)
# Print the formula and coefficients
cat("Regression Formula:", format(formula), "\n")
cat("Coefficients:\n")
print(coefficients)
# Check the significance of the predictors
summary(regression_model)
# Plot residuals
residuals <- residuals(regression_model)
plot(residuals, xlab = "Observation", ylab = "Residuals", main = "Residuals Plot")
abline(h = 0, col = "red", lty = 2)  # Add a horizontal line at y = 0
knitr::opts_chunk$set(echo = TRUE)
# Specify the file path
file_path <- "C:/Users/GIS/Desktop/UNM Doc/STATISTICS PROGRAM/MY COURSES/Spring 2024 Courses/Spatial Statistics/Lab work/Lab 2/Lab2data.csv"
# Load the data into R as Lab2data
Lab2data <- read.csv(file_path)
# Print the loaded data
summary(Lab2data)
# Assuming "day," "Pollen," and "EVI" are the correct column names in Lab2data
# Assuming "day" is in date format
# Plot Pollen over Time
plot(x = Lab2data$day, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Specify the file path
file_path <- "C:/Users/GIS/Desktop/UNM Doc/STATISTICS PROGRAM/MY COURSES/Spring 2024 Courses/Spatial Statistics/Lab work/Lab 2/Lab2data.csv"
# Load the data into R as Lab2data
Lab2data <- read.csv(file_path)
# Plot Pollen over Time
plot(x = Lab2data$day, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Plot EVI over Time
plot(x = Lab2data$day, y = Lab2data$EVI, type = "l", col = "green",
xlab = "Date", ylab = "EVI", main = "EVI Over Time")
Lab2data$day
Lab2data$Pollen
# Convert Date to a Date object if not already
Lab2data$Date <- as.Date(Lab2data$Date)
Lab2data$Date <- as.Date(Lab2data$day)
Lab2data$Date <- as.Date(Lab2data$Day)
Lab2data$Date <- as.Date(Lab2data$day)
# Convert Date to a Date object if not already
Lab2data$Date <- as.Date(Lab2data$Day)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Plot for EVI
plot(x = Lab2data$Date, y = Lab2data$EVI, type = "l", col = "green",
xlab = "Date", ylab = "EVI", main = "EVI Over Time")
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 2)
# Plot for EVI
plot(x = Lab2data$Date, y = Lab2data$EVI, type = "l", col = "green",
xlab = "Date", ylab = "EVI", main = "EVI Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 2)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 5)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 5)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 5)
# Convert Date to a Date object if not already
Lab2data$Date <- as.Date(Lab2data$Day)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 5)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 2)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 2)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 3)
# Plot for EVI
plot(x = Lab2data$Date, y = Lab2data$EVI, type = "l", col = "green",
xlab = "Date", ylab = "EVI", main = "EVI Over Time")
# Format x-axis as dates
axis.Date(1, at = Lab2data$Date, format = "%Y-%m-%d", las = 2)
# Plot for Pollen
plot(x = Lab2data$Date, y = Lab2data$Pollen, type = "l", col = "blue",
xlab = "Date", ylab = "Pollen Count", main = "Pollen Count Over Time")
# Format x-axis as dates with a specified interval (e.g., every 5th date)
axis.Date(1, at = Lab2data$Date[seq(1, length(Lab2data$Date), by = 5)],
format = "%Y-%m-%d", las = 2)
# Plot for EVI
plot(x = Lab2data$Date, y = Lab2data$EVI, type = "l", col = "green",
xlab = "Date", ylab = "EVI", main = "EVI Over Time")
# Format x-axis as dates with a specified interval (e.g., every 5th date)
axis.Date(1, at = Lab2data$Date[seq(1, length(Lab2data$Date), by = 5)],
format = "%Y-%m-%d", las = 2)
Lab2data$Day <- as.Date(Lab2data$Day, format="%m/%d/%Y")
plot(Lab2data$Day, Lab2data$pollen, type="l", col="blue", xlab="Date", ylab="Pollen Count", main="Pollen Count Over Time")
plot(Lab2data$Day, Lab2data$EVI, type="l", col="green", xlab="Date", ylab="EVI", main="EVI Over Time")
# Convert the "Day" column to a Date type
Lab2data$Day <- as.Date(Lab2data$Day, format="%m/%d/%Y")
# Plot 1: Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type="l", col="blue", xlab="Date", ylab="Pollen Count", main="Pollen Count Over Time")
# Plot 2: EVI
plot(Lab2data$Day, Lab2data$EVI, type="l", col="green", xlab="Date", ylab="EVI", main="EVI Over Time")
# Convert the "Day" column to a Date type
Lab2data$Day <- as.Date(Lab2data$Day, format="%m/%d/%Y")
# Plot 1: Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type="l", col="blue", xlab="Date", ylab="Pollen Count", main="Pollen Count Over Time")
# Plot 2: EVI
plot(Lab2data$Day, Lab2data$EVI, type="l", col="green", xlab="Date", ylab="EVI", main="EVI Over Time")
# Convert the "Day" column to a Date type
Lab2data$Day <- as.Date(Lab2data$Day, format="%m/%d/%Y")
par(mfrow=c(1,2))
# Plot 1: Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type="l", col="blue", xlab="Date", ylab="Pollen Count", main="Pollen Count Over Time")
# Plot 2: EVI
plot(Lab2data$Day, Lab2data$EVI, type="l", col="green", xlab="Date", ylab="EVI", main="EVI Over Time")
# Assuming "Pollen" and "EVI" are the correct column names in Lab2data
# Fit a linear regression model
regression_model <- lm(pollen ~ EVI, data = Lab2data)
# Get the formula and coefficients
formula <- as.formula(regression_model)
coefficients <- coef(regression_model)
# Print the formula and coefficients
cat("Regression Formula:", format(formula), "\n")
cat("Coefficients:\n")
print(coefficients)
# Check the significance of the predictor (EVI)
summary(regression_model)
# Plot the data and add the fitted regression line
plot(Lab2data$EVI, Lab2data$Pollen, xlab = "EVI", ylab = "Pollen Count", main = "Pollen Count Vs EVI")
abline(regression_model, col = "red")
# Plot residuals in a separate graph
residuals <- residuals(regression_model)
plot(Lab2data$EVI, residuals, xlab = "EVI", ylab = "Residuals", main = "Residuals Vs EVI")
# Assuming "Pollen" and "EVI" are the correct column names in Lab2data
# Fit a linear regression model
regression_model <- lm(pollen ~ EVI, data = Lab2data)
# Get the formula and coefficients
formula <- as.formula(regression_model)
coefficients <- coef(regression_model)
# Print the formula and coefficients
cat("Regression Formula:", format(formula), "\n")
cat("Coefficients:\n")
print(coefficients)
# Check the significance of the predictor (EVI)
summary(regression_model)
par(mfrow=c(1,2))
# Plot the data and add the fitted regression line
plot(Lab2data$EVI, Lab2data$Pollen, xlab = "EVI", ylab = "Pollen Count", main = "Pollen Count Vs EVI")
abline(regression_model, col = "red")
# Plot residuals in a separate graph
residuals <- residuals(regression_model)
plot(Lab2data$EVI, residuals, xlab = "EVI", ylab = "Residuals", main = "Residuals Vs EVI")
# QQ plot for temperature
qqnorm(Lab2data$Temp2, main = "QQ Plot for Temperature")
qqline(Lab2data$Temp2, col = 2)
# QQ plot for pollen count
qqnorm(Lab2data$pollen, main = "QQ Plot for Pollen Count")
qqline(Lab2data$pollen, col = 2)
# Shapiro-Wilk Normality Test for temperature
shapiro_temp <- shapiro.test(Lab2data$Temp2)
cat("Shapiro-Wilk Normality Test for Temperature:\n", "p-value =", shapiro_temp$p.value, "\n")
# Shapiro-Wilk Normality Test for pollen count
shapiro_pollen <- shapiro.test(Lab2data$pollen)
cat("Shapiro-Wilk Normality Test for Pollen Count:\n", "p-value =", shapiro_pollen$p.value, "\n")
par(mfrow=c(1,2))
# QQ plot for temperature
qqnorm(Lab2data$Temp2, main = "QQ Plot for Temperature")
qqline(Lab2data$Temp2, col = 2)
# QQ plot for pollen count
qqnorm(Lab2data$pollen, main = "QQ Plot for Pollen Count")
qqline(Lab2data$pollen, col = 2)
# Shapiro-Wilk Normality Test for temperature
shapiro_temp <- shapiro.test(Lab2data$Temp2)
cat("Shapiro-Wilk Normality Test for Temperature:\n", "p-value =", shapiro_temp$p.value, "\n")
# Shapiro-Wilk Normality Test for pollen count
shapiro_pollen <- shapiro.test(Lab2data$pollen)
cat("Shapiro-Wilk Normality Test for Pollen Count:\n", "p-value =", shapiro_pollen$p.value, "\n")
# Specify the file path
file_path <- "C:/Users/GIS/Desktop/UNM Doc/STATISTICS PROGRAM/MY COURSES/Spring 2024 Courses/Spatial Statistics/Lab work/Lab 2/Lab2data.csv"
# Load the data into R as Lab2data
Lab2data <- read.csv(file_path)
# Print the loaded data
summary(Lab2data)
# Count values for the first 10 days
pollen_count <- Lab2data$pollen[1:10]
print(pollen_count)
# Count values for the first 10 days
pollen_count <- Lab2data$pollen[1:10]
print(pollen_count)
# Specify the file path
file_path <- "C:/Users/GIS/Desktop/UNM Doc/STATISTICS PROGRAM/MY COURSES/Spring 2024 Courses/Spatial Statistics/Lab work/Lab 2/Lab2data.csv"
# Load the data into R as Lab2data
Lab2data <- read.csv(file_path)
# Print the loaded data
summary(Lab2data)
# Convert the "Day" column to a Date type
Lab2data$Day <- as.Date(Lab2data$Day, format="%m/%d/%Y")
par(mfrow=c(1,2))
# Plot 1: Pollen Count
plot(Lab2data$Day, Lab2data$pollen, type="l", col="blue", xlab="Date", ylab="Pollen Count", main="Pollen Count Over Time")
# Plot 2: EVI
plot(Lab2data$Day, Lab2data$EVI, type="l", col="green", xlab="Date", ylab="EVI", main="EVI Over Time")
